Maven 
   Maven 是一个项目管理和综合工具。Maven 提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，3
   Maven 使用标准的目录结构和默认构建生命周期。
 IoC 是什么
    一种设计思想， Ioc 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。理解好 Ioc 的关键是要明确
    “谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”
        传统 Java SE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；而 IoC 是有专门一个容器来创建这些对象，
    即由 Ioc 容器来控制对象的创建。谁控制谁？当然是 IoC 容器控制了对象。控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。
    
    传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转。而反转则是由容器来帮忙创建及注入依赖对象。因为由容器帮我们查找
    及注入依赖对象，对象只是被动的接受依赖对象，所以是反转
    哪些方面反转了？依赖对象的获取被反转了。
    
    传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试。有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，
    由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。
    即由 IoC 容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。
    
    依赖注入”明确描述了“被注入对象依赖 IoC 容器配置依赖对象”
    
    ApplicationContext 完全继承 BeanFactory ，因而 BeanFactory 所具有的语义也适用于 ApplicationContext。
    
    @Autowired 默认按类型装配，默认情况下必须要求依赖对象必须存在，如果要允许 null 值，可以设置它的 required 属性为 false 
    通过使用注释 @Configuration 告诉 Spring ，这个 Class 是 Spring 的核心配置文件，并且通过使用注释 @Bean 定义 bean ，举例说明：
     @Configuration
public class AppConfig {

    @Bean(name="animal")
    public IAnimal getAnimal(){
        return new Dog();
    }
}
<bean id="animal" class="com.lei.demo.java_config.Dog">
    
